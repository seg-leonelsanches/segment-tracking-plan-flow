# This is a basic workflow to help you get started with Actions

name: Deploy to Segment

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          fetch-depth: ${{ github.event_name == 'pull_request' && 2 || 0 }}
      - uses: lots0logs/gh-action-get-changed-files@2.1.4
        id: get_changed_files
        with:
          token: "${{secrets.GITHUB_TOKEN}}"
      - name: Files Output
        run: |
          echo "${{ steps.get_changed_files.outputs.added }}"
      #- uses: komorebitech/read-files-action@v1.5
      #  id: read_migration_files
      #  with:
      #    files: ${{ steps.get_changed_files.outputs.added }}
      #    pattern: '*'
      #- name: Get changed files
      #  id: changed-files
      #  run: |
      #      if ${{ github.event_name == 'pull_request' }}; then
      #          echo "changed_files=$(git diff --name-only -r HEAD^1 HEAD | xargs)" >> $GITHUB_OUTPUT
      #      else
      #          echo "changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | xargs)" >> $GITHUB_OUTPUT
      #      fi
      #- name: List changed files
      #  run: |
      #      for file in ${{ steps.changed-files.outputs.changed_files }}; do
      #          echo "$file was changed"
      #      done

      # Runs a set of commands using the runners shell
      # - name: Deploy to Segment
      #  run: |
      #    curl --location --request PUT 'https://api.segmentapis.com/tracking-plans/tp_2eI1Qp3KVbQxyJmlS2GGX4xkdQd/rules' \
      #      --http1.1 \
      #      --header 'Content-Type: application/vnd.segment.v1+json' \
      #      --header 'Accept: application/vnd.segment.v1+json' \
      #      --header 'Authorization: Bearer ${{ secrets.PUBLIC_API_SECRET }}' \
      #      --data '{ "rules": [{ "jsonSchema": {}, "type": "TRACK", "version": "1", "key": "My Sample Event" }]}'
